From 4548432f5430a1bcf332ee155f5d2f6049850a5d Mon Sep 17 00:00:00 2001
From: mthiru270 <madanagopal_thirumalai@comcast.com>
Date: Thu, 27 May 2021 06:37:50 +0530
Subject: [PATCH] RDKTV-6512: Prevent setvisbility crash during concurrent
 destroy

---
 RDKShell/RDKShell.cpp | 21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/RDKShell/RDKShell.cpp b/RDKShell/RDKShell.cpp
index d150a48d..28534eaf 100755
--- a/RDKShell/RDKShell.cpp
+++ b/RDKShell/RDKShell.cpp
@@ -372,6 +372,7 @@ namespace WPEFramework {
         std::mutex gRdkShellMutex;
         std::mutex gPluginDataMutex;
         std::mutex gLaunchDestroyMutex;
+        std::mutex gDestroyMutex;
 
         std::mutex gLaunchMutex;
         int32_t gLaunchCount = 0;
@@ -3284,6 +3285,7 @@ namespace WPEFramework {
                 joParams.Set("callsign",callsign.c_str());
                 JsonObject joResult;
                 auto thunderController = getThunderControllerClient();
+                gDestroyMutex.lock();
                 uint32_t status = thunderController->Invoke(RDKSHELL_THUNDER_TIMEOUT, "deactivate", joParams, joResult);
                 if (status > 0)
                 {
@@ -3299,6 +3301,7 @@ namespace WPEFramework {
                     }
                     onDestroyed(callsign);
                 }
+                gDestroyMutex.unlock();
 		gLaunchDestroyMutex.lock();
                 gDestroyApplications.erase(callsign);
 		gLaunchDestroyMutex.unlock();
@@ -5025,7 +5028,19 @@ namespace WPEFramework {
             }
             ret = CompositorController::setVisibility(client, visible);
             gRdkShellMutex.unlock();
-
+            
+            bool isApplicationBeingDestroyed = false;
+            gLaunchDestroyMutex.lock();
+            if (gDestroyApplications.find(client) != gDestroyApplications.end())
+            {
+                isApplicationBeingDestroyed = true;
+            }
+            gLaunchDestroyMutex.unlock();
+            if (isApplicationBeingDestroyed)
+            {
+                std::cout << "ignoring setvisibility for " << client << " as it is being destroyed " << std::endl;
+                return false;
+            }
             std::map<std::string, PluginData> activePluginsData;
             gPluginDataMutex.lock();
             activePluginsData = gActivePluginsData;
@@ -5037,6 +5052,7 @@ namespace WPEFramework {
                 if (pluginData.mClassName.compare("WebKitBrowser") == 0)
                 {
                     std::cout << "setting the visiblity of " << client << " to " << visible << std::endl;
+                    gDestroyMutex.lock();
                     uint32_t status = 0;
                     Exchange::IWebBrowser *browser = mCurrentService->QueryInterfaceByCallsign<Exchange::IWebBrowser>(client);
                     if (browser != NULL)
@@ -5048,9 +5064,10 @@ namespace WPEFramework {
                     {
                         status = 1;
                     }
+                    gDestroyMutex.unlock();
                     if (status > 0)
                     {
-                        std::cout << "failed to set visibility proprty to browser " << client << " with status code " << status << std::endl;
+                        std::cout << "failed to set visibility property to browser " << client << " with status code " << status << std::endl;
                     }
                 }
             }
